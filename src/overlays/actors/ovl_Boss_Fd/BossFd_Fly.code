//I've placed this in its own file for ease of reading.

void func_808CB718(BossFd* this, GlobalContext* globalCtx) {

    u8 sp1CF;
    f32 dy;
    f32 sp1B4;
    f32 sp1B0;
    Vec3f sp188;
    Vec3f sp17C;
    Vec3f sp170;
    Vec3f sp164;
    Vec3f sp158;
    s16 sp150;
    Vec3f sp144;
    Vec3f sp138;
    Vec3f sp12C;
    Vec3f sp120;
    Vec3f sp114;
    Vec3f sp108;
    Vec3f spE0[3];
    Vec3f spBC[3];
    f32 dx2;
    f32 dz2;
    f32 dPerp;
    Camera* camera;
    Vec3f* temp_v0;
    Vec3f* temp_v0_10;
    Vec3f* temp_v0_12;
    Vec3f* holeXYZ;
    f32 temp_f0;
    f32 temp_f0_2;
    f32 temp_f10;
    f32 temp_f12;
    f32 temp_f2_2;
    f32 temp_f2_3;
    f32 temp_f2_4;
    f32 temp_f4_3;
    s16 temp_v0_13;
    s16 temp_v0_14;
    s16 temp_v0_3;
    s16 temp_v0_6;
    s16 temp_v0_7;
    s16 temp_v0_8;
    s16 temp_v1_3;
    s16 temp_v1_4;
    s16 temp_v1_5;
    s16 temp_v1_6;
    s16 temp_v1_7;
    s16 temp_v1_8;
    s32 temp_s0_2;
    s16 temp_s0_4;
    s16 temp_s0_5;
    s32 temp_s0_7;
    s32 temp_s3_3;
    s32 temp_s5_2;
    s32 temp_s5_3;
    s32 temp_t1_2;
    u32 temp_t0;
    u32 temp_t1;
    u32 temp_t3;
    u8 temp_v0_11;
    Player* player = PLAYER;
    s16 phi_s0;
    s16 phi_s5;
    s16 phi_v1_5;
    s16 phi_v1_6;
    s16 phi_s5_2;
    s32 phi_v1_7;
    s16 phi_v1_8;
    s16 phi_v1_9;
    s32 phi_s3;
    s32 phi_s0_2;
    f32 phi_f20;
    f32 dx;
    f32 dz;
    s16 actionState;

    sp1CF = 0;
    SkelAnime_FrameUpdateMatrix(&this->skelAnime1);
    SkelAnime_FrameUpdateMatrix(&this->skelAnime2);
    SkelAnime_FrameUpdateMatrix(&this->skelAnime3);
    dx = this->targetPosition.x - this->actor.posRot.pos.x;
    dy = this->targetPosition.y - this->actor.posRot.pos.y;
    dz = this->targetPosition.z - this->actor.posRot.pos.z;
    dx += Math_Sins(this->movementTimer * (2096.0f + this->unk_2B4)) * this->unk_2B0;
    dy += Math_Sins(this->movementTimer * (1096.0f + this->unk_2B4)) * this->unk_2B0;
    dz += Math_Sins(this->movementTimer * (1796.0f + this->unk_2B4)) * this->unk_2B0;
    sp1B4 = (s16)(Math_atan2f(dx, dz) * 10430.378f);
    dx2 = dx * dx;
    dz2 = dz * dz;
    dPerp = sqrtf(dx2 + dz2);
    sp1B0 = (s16)(Math_atan2f(dy, dPerp) * 10430.378f);
    osSyncPrintf("MODE %d\n", this->actionState);
    Math_SmoothScaleMaxF(&this->unk_280, 0.1f, 1.0f, 0.02f);

    /****************************************************************************************
     *                                   Boss Intro Cutscene                                *
     ****************************************************************************************/

    if (this->introState2 != 0) {
        camera = Gameplay_GetCamera(globalCtx, 0);
        switch (this->introState2) { // switch 1
            case 1:                  // switch 1
                this->fogMode = 3;
                this->targetPosition.x = 0.0f;
                this->targetPosition.y = -110.0f;
                this->targetPosition.z = 0.0f;
                this->unk_2AC = 10000.0f;
                this->actionState = -1;
                if ((fabsf(player->actor.posRot.pos.z) < 80.0f) &&
                    (fabsf(player->actor.posRot.pos.x - 340.0f) < 60.0f)) {

                    this->introState2 = 2;
                    func_80064520(globalCtx, &globalCtx->csCtx);
                    func_8002DF54(globalCtx, &this->actor, 8);
                    this->introCameraState = Gameplay_CreateSubCamera(globalCtx);
                    Gameplay_ChangeCameraStatus(globalCtx, 0, 1);
                    Gameplay_ChangeCameraStatus(globalCtx, this->introCameraState, 7);
                    player->actor.posRot.pos.x = 380.0f;
                    player->actor.posRot.pos.y = 100.0f;
                    player->actor.posRot.pos.z = 0.0f;
                    player->actor.posRot.rot.y = -0x4000;
                    player->actor.speedXZ = 0.0f;
                    player->actor.shape.rot.y = player->actor.posRot.rot.y;
                    this->unk_1408.x = 380.0f - 70.0f;
                    this->unk_1408.y = player->actor.posRot.pos.y + 40.0f;
                    this->unk_1408.z = player->actor.posRot.pos.z + 70.0f;
                    this->unk_1414.x = player->actor.posRot.pos.x;
                    this->unk_1414.y = player->actor.posRot.pos.y + 30.0f;
                    this->unk_1414.z = player->actor.posRot.pos.z;
                    this->unk_1450.x = (player->actor.posRot.pos.x - 50.0f) + 18.0f;
                    this->unk_1450.y = player->actor.posRot.pos.y + 40.0f;
                    this->unk_1450.z = (player->actor.posRot.pos.z + 50.0f) - 18.0f;
                    this->unk_1468.x = player->actor.posRot.pos.x;
                    this->unk_1468.y = player->actor.posRot.pos.y + 50.0f;
                    this->unk_1468.z = player->actor.posRot.pos.z;
                    func_808CB100(this, 1.0f);
                    this->animationTimers[0] = 0;
                    this->unk_1474.z = 0.05f;
                    this->unk_1474.y = 0.05f;
                    this->unk_1474.x = 0.05f;
                    this->unk_145C.z = 0.05f;
                    this->unk_145C.y = 0.05f;
                    this->unk_145C.x = 0.05f;
                    this->unk_1480 = 0.0f;
                    this->unk_1484 = 0.0f;
                    if ((gSaveContext.eventChkInf[7] & 8) != 0) {
                        this->introState2 = 6;
                        this->unk_1450.x = ((player->actor.posRot.pos.x + 100.0f) + 300.0f) - 600.0f;
                        this->unk_1450.y = (player->actor.posRot.pos.y + 100.0f) - 50.0f;
                        this->unk_1450.z = (player->actor.posRot.pos.z + 200.0f) - 150.0f;
                        this->unk_1468.x = 0.0f;
                        this->unk_1468.y = 120.0f;
                        this->unk_1468.z = 0.0f;
                        func_808CB100(this, 0.5f);
                        this->animationTimers[0] = 0;
                        this->holeIndex = 1;
                        temp_v0 = &D_808D192C[this->holeIndex & 0xFF];
                        this->unk_145C.x = 0.1f;
                        this->unk_145C.y = 0.1f;
                        this->unk_145C.z = 0.1f;
                        this->unk_1474.x = 0.1f;
                        this->unk_1474.y = 0.1f;
                        this->unk_1474.z = 0.1f;
                        this->unk_1484 = 0.005f;
                        this->targetPosition.x = temp_v0->x;
                        this->targetPosition.y = temp_v0->y - 200.0f;
                        this->targetPosition.z = temp_v0->z;
                        this->animationTimers[0] = 0x32;
                        this->actionState = 3;
                        this->actor.posRot.rot.x = 0x4000;
                        this->movementTimer = 0;
                        this->animationTimers[3] = 0xFA;
                        this->animationTimers[2] = 0x1D6;
                        this->unk_2A4 = 5.0f;
                    }
                }
                break;
            case 2: // switch 1
                if (this->animationTimers[0] == 0) {
                    this->animationTimers[0] = 0x64;
                    this->introState2 = 3;
                    this->unk_1484 = 0.0010000002f;
                }
            case 3: // switch 1
                player->actor.posRot.rot.y = -0x4000;
                player->actor.posRot.pos.x = 380.0f;
                player->actor.posRot.pos.y = 100.0f;
                player->actor.posRot.pos.z = 0.0f;
                player->actor.speedXZ = 0.0f;
                player->actor.shape.rot.y = player->actor.posRot.rot.y;
                if (this->animationTimers[0] == 0x32) {
                    this->fogMode = 1;
                }
                if (this->animationTimers[0] < 0x32) {
                    Audio_PlaySoundGeneral(0x304E, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0, &D_801333E8);
                    this->unk_1488 = Math_Coss(this->movementTimer * 0x8000) * this->unk_148C;
                    Math_SmoothScaleMaxF(&this->unk_148C, 2.0f, 1.0f, 0.007999999f);
                }
                if (this->animationTimers[0] == 0x28) {
                    func_8002DF54(globalCtx, &this->actor, 0x13);
                }
                if (this->animationTimers[0] == 0) {
                    this->introState2 = 4;
                    this->unk_1468.y = player->actor.posRot.pos.y + 10.0f;
                    this->unk_1480 = 0.0f;
                    this->unk_1474.y = 0.2f;
                    this->animationTimers[0] = 0x46;
                    this->movementTimer = 0;
                    this->unk_1484 = 0.02f;
                }
                break;
            case 4: // switch 1
                this->unk_1488 = Math_Coss(this->movementTimer * 0x8000) * this->unk_148C;
                Math_SmoothScaleMaxF(&this->unk_148C, 2.0f, 1.0f, 0.007999999f);
                Audio_PlaySoundGeneral(0x304E, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0, &D_801333E8);
                if (this->animationTimers[0] == 0) {
                    this->introState2 = 5;
                    this->unk_1450.x = (player->actor.posRot.pos.x + 100.0f) + 300.0f;
                    this->unk_1450.y = player->actor.posRot.pos.y + 100.0f;
                    this->unk_1450.z = player->actor.posRot.pos.z + 200.0f;
                    this->unk_1468.x = player->actor.posRot.pos.x;
                    this->unk_1468.y = player->actor.posRot.pos.y - 150.0f;
                    this->unk_1468.z = player->actor.posRot.pos.z - 50.0f;
                    func_808CB100(this, 0.1f);
                    this->animationTimers[0] = 0xAA;
                    this->unk_1480 = 0.0f;
                    this->unk_1484 = 0.0f;
                    func_8002DF54(globalCtx, &this->actor, 0x14);
                }
                break;
            case 5: // switch 1
                this->unk_1484 = 0.005f;
                this->unk_1488 = Math_Coss(this->movementTimer * 0x8000) * this->unk_148C;
                Math_SmoothScaleMaxF(&this->unk_148C, 2.0f, 1.0f, 0.007999999f);
                Audio_PlaySoundGeneral(0x304E, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0, &D_801333E8);
                if (this->animationTimers[0] == 0x64) {
                    this->collapsePlatform = 1;
                }
                if (this->animationTimers[0] == 0) {
                    this->introState2 = 6;
                    this->unk_1480 = 0.0f;
                    this->unk_1450.x = ((player->actor.posRot.pos.x + 100.0f) + 300.0f) - 600.0f;
                    this->unk_1450.y = (player->actor.posRot.pos.y + 100.0f) - 50.0f;
                    this->unk_1450.z = (player->actor.posRot.pos.z + 200.0f) - 150.0f;
                    this->unk_1468.x = 0.0f;
                    this->unk_1468.y = 120.0f;
                    this->unk_1468.z = 0.0f;
                    func_808CB100(this, 0.5f);
                    this->unk_1474.x = 0.1f;
                    this->unk_1474.y = 0.1f;
                    this->unk_1474.z = 0.1f;
                    this->unk_145C.x = 0.1f;
                    this->unk_145C.y = 0.1f;
                    this->unk_145C.z = 0.1f;
                    this->unk_1484 = 0.005f;
                    this->animationTimers[0] = 0;
                    this->holeIndex = 1;
                    holeXYZ = &D_808D192C[this->holeIndex];

                    this->targetPosition.x = holeXYZ->x;
                    this->targetPosition.y = holeXYZ->y - 200.0f;
                    this->targetPosition.z = holeXYZ->z;
                    this->animationTimers[0] = 0x32;
                    this->actionState = 3;
                    this->actor.posRot.rot.x = 0x4000;
                    this->movementTimer = 0;
                    this->animationTimers[3] = 0xFA;
                    this->animationTimers[2] = 0x1D6;
                    this->unk_2A4 = 5.0f;
                }
                break;
            case 6: // switch 1
                osSyncPrintf("WAY_SPD X = %f\n", this->unk_1444.x);
                osSyncPrintf("WAY_SPD Y = %f\n", this->unk_1444.y);
                osSyncPrintf("WAY_SPD Z = %f\n", this->unk_1444.z);
                if ((this->animationTimers[3] >= 0xBF) && ((gSaveContext.eventChkInf[7] & 8) == 0)) {
                    Audio_PlaySoundGeneral(0x304E, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0, &D_801333E8);
                }
                if (this->animationTimers[3] == 0xBE) {
                    this->unk_1474.z = 0.05f;
                    this->unk_1474.y = 0.05f;
                    this->collapsePlatform = 2;
                    this->unk_1474.x = 0.05f;
                    func_8002DF54(globalCtx, &this->actor, 1);
                }
                if (120.0f < this->actor.posRot.pos.y) {
                    this->unk_1468 = this->actor.posRot.pos;
                    this->unk_1444.x = 190.0f;
                    this->unk_1444.y = 85.56f;
                    this->unk_1444.z = 25.0f;
                } else {
                    Math_SmoothScaleMaxF(&this->unk_148C, 2.0f, 1.0f, 0.007999999f);
                    this->unk_1488 = Math_Coss(this->movementTimer * 0x8000) * this->unk_148C;
                }
                if (this->animationTimers[3] == 0xA0) {
                    Audio_SetBGM(0x6B);
                }
                if ((this->animationTimers[3] == 0x82) && ((gSaveContext.eventChkInf[7] & 8) == 0)) {
                    TitleCard_InitBossName(globalCtx, &globalCtx->actorCtx.titleCtx, SEGMENTED_TO_VIRTUAL(D_0600D700),
                                           0xA0, 0xB4, 0x80, 0x28);
                }
                if (this->animationTimers[3] < 0x65) {
                    this->unk_1438.z = 2.0f;
                    this->unk_1438.y = 2.0f;
                    this->unk_1438.x = 2.0f;
                    this->unk_1450.x = player->actor.posRot.pos.x + 50.0f;
                    this->unk_1450.y = player->actor.posRot.pos.y + 50.0f;
                    this->unk_1450.z = player->actor.posRot.pos.z + 50.0f;
                }
                if (this->actionState == 1) {
                    switch (this->introState1) {
                        case 0:
                            this->animationTimers[5] = 0x64;
                            this->introState1 = 1;
                        case 1:
                            if (this->animationTimers[5] == 0) {
                                this->introState1 = 2;
                                this->animationTimers[5] = 0x4B;
                            }
                            break;
                        case 2:
                            this->targetPosition = this->unk_1408;
                            if (this->animationTimers[5] == 0) {
                                this->animationTimers[0] = 0;
                                this->holeIndex = 7;
                                holeXYZ = &D_808D192C[this->holeIndex];
                                this->targetPosition.x = holeXYZ->x;
                                this->targetPosition.y = (holeXYZ->y + 200.0f) + 50.0f;
                                this->targetPosition.z = holeXYZ->z;
                                this->introState1 = 3;
                            }
                            if (this->animationTimers[5] == 0x1E) {
                                this->roarTimer = 0x28;
                                this->fireBreathTimer = 0x14;
                            }
                        case 3:
                            break;
                        default:
                            break;
                    }
                }
                osSyncPrintf("this->timer[2] = %d\n", this->animationTimers[2]);
                osSyncPrintf("this->timer[5] = %d\n", this->animationTimers[5]);
                if (this->animationTimers[2] == 0) {
                    camera->eye = this->unk_1408;
                    camera->eyeNext = this->unk_1408;
                    camera->at = this->unk_1414;
                    func_800C08AC(globalCtx, this->introCameraState, 0);
                    this->introCameraState = 0;
                    this->introState1 = this->introCameraState;
                    this->introState2 = this->introCameraState;
                    func_80064534(globalCtx, &globalCtx->csCtx);
                    func_8002DF54(globalCtx, &this->actor, 7);
                    this->actionFunc = &func_808CDE30;
                    this->handoffSignal = 0x64;
                    gSaveContext.eventChkInf[7] |= 8;
                }
        }
        func_808CB198(this, globalCtx);
    } else {
        this->unk_2A4 = 5.0f;
    }

    /***********************************************************************************************
     *                              Attacks and Death Cutscene                                     *
     ***********************************************************************************************/
    
    switch(this->actionState) {
        case 0: //Cases 0 - 3 deal with flying in and out of holes
            sp1CF = 1;
            if (this->animationTimers[0] == 0) {
                if (this->actor.colChkInfo.health == 0) {
                    this->actionState = 0xC8;
                    this->animationTimers[0] = 0;
                    this->animationTimers[1] = 0x64;
                } else {
                    if (this->introState2 != 0) {
                        this->holeIndex = 6;
                    } else {
                        do {
                            temp_v0_11 = Math_Rand_ZeroFloat(8.9f);
                        } while (this->holeIndex == temp_v0_11);
                        this->holeIndex = temp_v0_11;
                    }
                    temp_v0_12 = &D_808D192C[this->holeIndex];
                    this->targetPosition.x = temp_v0_12->x;
                    this->targetPosition.y = (temp_v0_12->y + 200.0f) + 50.0f;
                    this->targetPosition.z = temp_v0_12->z;
                    this->unk_2A8 = 0.0f;
                    this->unk_2AC = 1000.0f;
                    this->unk_2B0 = 100.0f;
                    this->animationTimers[0] = (this->introState2 != 0) ? 0x2742 : 0x14;
                    this->actionState = 1;
                    if (this->startAttack != 0) {
                        this->startAttack = 0;
                        this->flightCount += 1;
                        if ((this->flightCount & 1) != 0) {
                            this->unk_236 = 0;
                            this->actionState = 0x64;
                            this->animationTimers[0] = 0x12C;
                            this->unk_2AC = 900.0f;
                            this->unk_278 = 300.0f;
                            this->unk_234 = this->unk_236;
                        } else {
                            this->actionState = 0x32;
                        }
                    }
                }
            }
            break;
        case 1:
            if (this->animationTimers[0] == 0) {
                if (sqrtf((dx2 + (dy * dy)) + dz2) < 100.0f) {
                    this->actionState = 2;
                    this->targetPosition.y = D_808D192C[this->holeIndex].y - 70.0f;
                    this->unk_2B0 = 0.0f;
                    this->holePosition.x = this->targetPosition.x;
                    this->unk_2AC = 10000.0f;
                    this->holePosition.z = this->targetPosition.z;
                    this->animationTimers[0] = 0x96;
                    this->roarTimer = 0x28;
                }
            }
            break;
        case 2:
            sp1CF = 1;
            if (this->animationTimers[0] == 0) {
                this->actionFunc = &func_808CDE30;
                this->handoffSignal = 0x64;
            }
            break;
        case 3:
            if (this->animationTimers[0] == 0) {
                if (sqrtf((dx2 + (dy * dy)) + dz2) < 100.0f) {
                    this->actor.posRot.pos = this->targetPosition;
                    this->actionState = 0;
                    this->actor.posRot.rot.x = 0x4000;
                    this->animationTimers[4] = 0x50;
                    this->targetPosition.y = D_808D192C[this->holeIndex].y + 200.0f;
                    this->unk_2AC = 1000.0f;
                    this->holePosition.z = this->targetPosition.z;
                    this->holePosition.x = this->targetPosition.x;
                    this->unk_2B0 = 0.0f;
                    func_80033E1C(globalCtx, 1, 0x50, 0x5000);
                    this->animationTimers[0] =(this->introState2 != 0) ? 0x32 : 0x32; 
                    // This isn't a fake match. The game actually does this.
                }
            }
            break;
        case 50: //Flying up to the ceiling to drop rocks
            this->unk_2A4 = 8.0f;
            this->unk_2B0 = 200.0f;
            this->targetPosition.y = 700.0f;
            this->targetPosition.x = 0.0f;
            this->targetPosition.z = -300.0f;
            this->unk_2AC = 3000.0f;
            if (700.0f < this->actor.posRot.pos.y) {
                this->actionState = 0x33;
                this->animationTimers[0] = 0x19;
                this->animationTimers[2] = 0x96;
                this->ceilingTargetIndex = 0;
            }
            break;
        case 51: //Flying around the ceiling dropping rocks
            this->unk_2B0 = 200.0f;
            this->unk_2A4 = 8.0f;
            temp_v0_10 = &D_808D1998[this->ceilingTargetIndex];
            this->unk_2AC = 10000.0f;
            this->targetPosition.x = temp_v0_10->x;
            this->targetPosition.y = temp_v0_10->y + 900.0f;
            this->targetPosition.z = temp_v0_10->z;
            if (this->animationTimers[0] == 0) {
                this->ceilingTargetIndex++;
                this->animationTimers[0] = 0x19;
                if (this->ceilingTargetIndex >= 6) {
                    this->ceilingTargetIndex = 0;
                }
            }
            func_8002E4B4(globalCtx, &this->actor, 50.0f, 50.0f, 100.0f, 2);
            if (this->animationTimers[1] == 0) {
                osSyncPrintf("BGCHECKKKKKKKKKKKKKKKKKKKKKKK\n", 1000.0f);
                if ((this->actor.bgCheckFlags & 0x10) != 0) {
                    this->animationTimers[1] = 0xA;
                    this->unk_27C = -18384.0f;
                    Audio_PlaySoundGeneral(0x2802, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0, &D_801333E8);
                    func_80033E1C(globalCtx, 3, 0xA, 0x7530);
                    this->rockTimer = 0x12C;
                }
            } else {
                sp1B0 = this->unk_27C;
                Math_SmoothDownscaleMaxF(&this->unk_27C, 1.0f, 1000.0f);
            }
            if (this->animationTimers[2] == 0) {
                this->actionState = 0;
                this->animationTimers[0] = 0;
                this->startAttack = 0;
            }
            break;
        case 100: //Chasing Link and breathing fire at him
            this->actor.flags |= 0x1000000;
            temp_f4_3 = Math_Sins(this->movementTimer * 2396.0f) * 30.0f;
            this->targetPosition.x = player->actor.posRot.pos.x;
            this->targetPosition.y = (player->actor.posRot.pos.y + (this->unk_278 + temp_f4_3)) + 30.0f;
            this->targetPosition.z = player->actor.posRot.pos.z;
            this->unk_2B0 = 0.0f;
            if (((this->animationTimers[0] & 0x3F) == 0) && (this->animationTimers[0] < 0x1C2)) {
                this->roarTimer = 0x28;
                if (func_808CB67C(this) != 0) {
                    this->fireBreathTimer = 0x14;
                }
            }
            if ((this->damageFlashTimer != 0)||(this->animationTimers[0] == 0)||(player->actor.posRot.pos.y < 70.0f)) {
            
                this->actionState = 0;
                this->animationTimers[0] = 0;
                this->startAttack = 0;
            } else {
                Math_SmoothScaleMaxF(&this->unk_278, 50.0f, 1.0f, 2.0f);
            }
            break;
        case 200: //Start of death cutscene
            if (dPerp < 50.0f) {
                this->animationTimers[0] = 0;
            }
            if (this->animationTimers[0] == 0) {
                this->animationTimers[0] = (s32) Math_Rand_ZeroFloat(10.0f) + 0xA;
                do {
                    this->targetPosition.x = Math_Rand_CenteredFloat(200.0f);
                    this->targetPosition.y = 390.0f;
                    temp_f0 = Math_Rand_CenteredFloat(200.0f);
                    this->targetPosition.z = temp_f0;
                    temp_f2_2 = this->targetPosition.x - this->actor.posRot.pos.x;
                    temp_f12 = temp_f0 - this->actor.posRot.pos.z;

                } while (100.0f >= sqrtf((temp_f2_2 * temp_f2_2) + (temp_f12 * temp_f12)));
            }
            this->unk_2B0 = 200.0f;
            this->unk_2B4 = 1000.0f;
            this->unk_2AC = 10000.0f;
            Math_SmoothScaleMaxF(&this->unk_280, 0.3f, 1.0f, 0.05f);
            if (this->animationTimers[1] == 0) {
                this->actionState = 0xC9;
                this->animationTimers[0] = 0x1E;
            }
            break;
        case 201: //Skin burning off scene
            this->unk_2B0 = 200.0f;
            this->targetPosition.y = 390.0f;
            this->unk_2B4 = 1000.0f;
            this->targetPosition.x = 0.0f;
            this->targetPosition.z = 0.0f;
            this->unk_2AC = 2000.0f;
            Math_SmoothScaleMaxF(&this->unk_280, 0.3f, 1.0f, 0.05f);
            if (this->animationTimers[0] == 0) {
                if ((this->movementTimer & 3) == 0) {
                    if (this->skinSegments != 0) {
                        this->skinSegments--;
                        if (this->skinSegments == 0) {
                            Audio_SetBGM(0x21);
                        }
                    } else {
                        this->actionState = 0xCA;
                        this->animationTimers[0] = 0x1E;
                    }
                }
            }
            if ((this->movementTimer & 0x1F) == 0) {
                this->roarTimer = 0x28;
            }
            if (this->skinSegments != 0) {
                sp17C = D_808D19E0;
                sp164 = D_808D19EC;

                if (this->fogMode == 0) {
                    globalCtx->envCtx.unk_D8 = 0.0f;
                }
                this->fogMode = 0xA;
                sp150 = 1;
                if ((this->movementTimer & 0x1C) != 0) {
                    Audio_PlaySoundGeneral(0x30DA, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0,
                                           &D_801333E8);
                }

                for (phi_s5 = 0; phi_s5 < sp150; phi_s5++) {
                    temp_t1_2 = (s16)Math_Rand_ZeroFloat(99.9f);
                    sp188.x = this->bodySegmentsPos[temp_t1_2].x;
                    sp188.y = this->bodySegmentsPos[temp_t1_2].y - 10.0f;
                    sp164.y = 0.03f;
                    sp188.z = this->bodySegmentsPos[temp_t1_2].z;
                    func_80029DBC(globalCtx, &sp188, &sp17C, &sp164, (s16)Math_Rand_ZeroFloat(20.0f) + 0x28,
                                  0x64);
                    for (phi_s0 = 0; phi_s0 < 15; phi_s0++) {
                        sp170.x = Math_Rand_CenteredFloat(20.0f);
                        sp170.y = Math_Rand_CenteredFloat(20.0f);
                        sp170.z = Math_Rand_CenteredFloat(20.0f);
                        sp158.y = 0.4f;
                        sp158.x = Math_Rand_CenteredFloat(0.5f);
                        sp158.z = Math_Rand_CenteredFloat(0.5f);
                        func_808CADC0(this->particles, &sp188, &sp170, &sp158,
                                      (s16)Math_Rand_ZeroFloat(3.0f) + 8);
                    }
                }
            }
            break;
        case 202: 
            temp_v1_3 = this->animationTimers[0];
            this->stopFlag = 1;
            this->fogMode = 3;
            if (temp_v1_3 < 0x12) {
                this->unk_13D0[temp_v1_3] = 1;
            }
            if (temp_v1_3 == 0) {
                this->actionState = 0xCB;
                this->animationTimers[0] = 0xF;
                this->ceilingTargetIndex = 0;
                player->actor.posRot.pos.y = 90.0f;
                player->actor.posRot.pos.x = 40.0f;
                player->actor.posRot.pos.z = 150.0f;
            }
            break;
        case 203: 
            if (this->animationTimers[0] == 0) {
                this->actionState = 0xCC;
                this->animationTimers[0] = 0x14;
                this->stopFlag = 0;
            }
            break;
        case 204: 
            temp_f0_2 = 0.0;
            this->unk_2A4 = this->unk_2AC = this->unk_2A8 = this->actor.speedXZ =  temp_f0_2;
            
            if (this->animationTimers[0] == 1) {
                this->actor.posRot.rot.y = 0;
                this->actor.posRot.pos.x = this->actor.velocity.x  = this->actor.velocity.z = temp_f0_2;
                this->actor.posRot.pos.y = 900.0f;
                this->actor.posRot.pos.z = 150.0f;
                this->actor.shape.rot.z = 0x1200;
                this->actor.posRot.rot.x = this->actor.posRot.rot.y;
            }
            if (this->animationTimers[0] == 0) {
                if (this->actor.posRot.pos.y <= 110.0f) {
                    this->actor.velocity.y = 0.0f;
                    this->actor.posRot.pos.y = 110.0f;
                    if (this->ceilingTargetIndex == 0) {
                        this->ceilingTargetIndex++;
                        this->animationTimers[1] = 0x3C;
                        this->deathCameraShakeTimer = 0x14;
                        Audio_PlaySoundGeneral(0x3889, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0,
                                               &D_801333E8);
                        func_8002DF54(globalCtx, &this->actor, 5);
                        for (phi_s5_2 = 0; phi_s5_2 < 15; phi_s5_2++) {
                            sp144 = D_808D19F8;
                            sp138 = D_808D1A04;
                            sp144.x = Math_Rand_CenteredFloat(8.0f);
                            sp144.y = Math_Rand_ZeroFloat(1.0f);
                            sp144.z = Math_Rand_CenteredFloat(8.0f);
                            sp138.y = 0.3f;
                            sp12C.x = Math_Rand_CenteredFloat(10.0f) + this->actor.posRot.pos.x;
                            sp12C.y = Math_Rand_CenteredFloat(10.0f) + this->actor.posRot.pos.y;
                            sp12C.z = Math_Rand_CenteredFloat(10.0f) + this->actor.posRot.pos.z;
                            func_808CAF5C(this->particles, &sp12C, &sp144, &sp138,
                                          Math_Rand_ZeroFloat(100.0f) + 300.0f);
                        }
                    }
                } else {
                    this->actor.velocity.y -= 1.0f;
                }
            } else {
                this->actor.velocity.y = 0.0f;
            }
            if (this->animationTimers[1] == 1) {
                this->actionState = 0xCD;
                this->animationTimers[0] = 0x46;
            }
            break;
        case 205: 
            this->actor.velocity.y = 0.0f;
            this->actor.posRot.pos.y = 110.0f;
            this->unk_2A8 = 0.0f;
            this->unk_2AC = 0.0f;
            this->unk_2A4 = 0.0f;
            this->actor.speedXZ = 0.0f;
            if ((this->animationTimers[0] < 0x32) && (this->animationTimers[0] > 0)) {
                sp114 = D_808D1A10;
                sp108 = D_808D1A1C;
                Audio_PlaySoundGeneral(0x301C, &this->actor.projectedPos, 4, &D_801333E0, &D_801333E0,
                                       &D_801333E8);
                sp120.x = Math_Rand_CenteredFloat(40.0f) + this->actor.posRot.pos.x;
                sp120.y = (Math_Rand_CenteredFloat(10.0f) + this->actor.posRot.pos.y) - 10.0f;
                sp120.z = (Math_Rand_CenteredFloat(40.0f) + this->actor.posRot.pos.z) + 5.0f;
                sp108.y = 0.03f;
                func_80029DBC(globalCtx, &sp120, &sp114, &sp108, (s16) Math_Rand_ZeroFloat(15.0f) + 0x1E, 0);
            }
            if (this->animationTimers[0] < 0x14) {
                Math_SmoothDownscaleMaxF(&this->actor.scale.x, 1.0f, 0.0025f);
                Actor_SetScale(&this->actor, this->actor.scale.x);
            }
            if (this->animationTimers[0] == 0) {
                this->actionFunc = &func_808CDE30;
                this->actor.posRot.pos.y -= 1000.0f;
            }
            if (this->animationTimers[0] == 7) {
                Actor_Spawn(&globalCtx->actorCtx, globalCtx, 0x5F, this->actor.posRot.pos.x,
                            this->actor.posRot.pos.y, this->actor.posRot.pos.z, 0, 0, 0, 0);
            }
            break;
        case -1:
            break;
    }
   
    /*************************************************************************************************
     *                                 Body segments and Mane                                        *
     *************************************************************************************************/

    if (this->stopFlag == 0) {
        Math_SmoothScaleMaxS(&this->actor.posRot.rot.y, sp1B4, 0xA, this->unk_2A8);

        if (((this->actionState == 0x64) || (this->actionState == 0x65)) && (this->actor.posRot.pos.y < 110.0f) &&
            (sp1B0 < 0.0f)) {
            sp1B0 = 0.0f;
            Math_SmoothScaleMaxF(&this->actor.posRot.pos.y, 110.0f, 1.0f, 5.0f);
        }

        Math_SmoothScaleMaxS(&this->actor.posRot.rot.x, sp1B0, 0xA, this->unk_2A8);
        Math_SmoothScaleMaxF(&this->unk_2A8, this->unk_2AC, 1.0f, 20000.0f);
        Math_SmoothScaleMaxF(&this->actor.speedXZ, this->unk_2A4, 1.0f, 0.1f);
        if (this->actionState < 0xCC) {
            func_8002D908(&this->actor);
        }
        func_8002D7EC(&this->actor);
        this->leadBodySegment++;
        if (this->leadBodySegment >= 0x64) {
            this->leadBodySegment = 0;
        }
        temp_s0_4 = this->leadBodySegment;
        this->bodySegmentsPos[temp_s0_4].x = this->actor.posRot.pos.x;
        this->bodySegmentsPos[temp_s0_4].y = this->actor.posRot.pos.y;
        this->bodySegmentsPos[temp_s0_4].z = this->actor.posRot.pos.z;
        this->bodySegmentsRot[temp_s0_4].x = (this->actor.posRot.rot.x / 32768.0f) * 3.1415927f;
        this->bodySegmentsRot[temp_s0_4].y = (this->actor.posRot.rot.y / 32768.0f) * 3.1415927f;
        this->bodySegmentsRot[temp_s0_4].z = (this->actor.posRot.rot.z / 32768.0f) * 3.1415927f;
        this->leadManeSegment++;
        if (this->leadManeSegment >= 0x1E) {
            this->leadManeSegment = 0;
        }
        temp_s0_5 = (this->leadManeSegment);
        this->centerManeScale[temp_s0_5] = (Math_Sins(((this->movementTimer * 5596.0f))) * 0.3f) + 1.0f;
        this->rightManeScale[temp_s0_5] = (Math_Sins(((this->movementTimer * 5496.0f))) * 0.3f) + 1.0f;
        this->leftManeScale[temp_s0_5] = (Math_Coss(((this->movementTimer * 5696.0f))) * 0.3f) + 1.0f;
        this->centerManePos[temp_s0_5] = this->centerManeHead;
        this->fireManeRot[temp_s0_5].x = (this->actor.posRot.rot.x / 32768.0f) * 3.1415927f;
        this->fireManeRot[temp_s0_5].y = (this->actor.posRot.rot.y / 32768.0f) * 3.1415927f;
        this->fireManeRot[temp_s0_5].z = (this->actor.posRot.rot.z / 32768.0f) * 3.1415927f;
        this->rightManePos[temp_s0_5] = this->rightManeHead;
        this->leftManePos[temp_s0_5] = this->leftManeHead;
        temp_v0_14 = this->actor.posRot.rot.x;
        if ((temp_v0_14 < 0x3000) && (temp_v0_14 >= -0x2FFF)) {
            Math_SmoothScaleMaxF(&this->flattenMane, 1.0f, 1.0f, 0.05f);
        } else {
            Math_SmoothScaleMaxF(&this->flattenMane, 0.5f, 1.0f, 0.05f);
        }

        if (this->actionState < 0xCC) {
            if ((this->actor.pos4.y < 90.0f) && (90.0f <= this->actor.posRot.pos.y)) {
                this->animationTimers[4] = 0x50;
                func_80033E1C(globalCtx, 1, 0x50, 0x5000);
                this->roarTimer = 0x28;
                this->maneEmbersTimer = 0x1E;
                this->holeSplashTimer = 0xA;
            }
            if ((90.0f < this->actor.pos4.y) && (this->actor.posRot.pos.y <= 90.0f)) {
                this->animationTimers[4] = 0x50;
                func_80033E1C(globalCtx, 1, 0x50, 0x5000);
                this->maneEmbersTimer = 0x1E;
                this->holeSplashTimer = 0xA;
            }
        }
        if (sp1CF == 0) {
            temp_f2_3 = Math_Sins(((this->movementTimer * 1500.0f))) * 3000.0f;
            spE0[0].y = temp_f2_3;
            spE0[0].x = temp_f2_3;
            spE0[1].x = Math_Sins(((this->movementTimer * 2000.0f))) * 4000.0f;
            spE0[1].y = Math_Sins(((this->movementTimer * 2200.0f))) * 4000.0f;
            spE0[2].x = Math_Sins(((this->movementTimer * 1700.0f))) * 2000.0f;
            spE0[2].y = Math_Sins(((this->movementTimer * 1900.0f))) * 2000.0f;
            spBC[0].x = spBC[0].y = Math_Sins(((this->movementTimer * 1500.0f))) * -3000.0f;
            spBC[1].x = Math_Sins(((this->movementTimer * 2200.0f))) * -4000.0f;
            spBC[1].y = Math_Sins(((this->movementTimer * 2000.0f))) * -4000.0f;
            spBC[2].x = Math_Sins(((this->movementTimer * 1900.0f))) * -2000.0f;
            spBC[2].y = Math_Sins(((this->movementTimer * 1700.0f))) * -2000.0f;
            phi_s3 = 0;
            for (phi_s3 = 0; phi_s3 < 3; phi_s3++) {
                Math_SmoothScaleMaxF(&this->unk_C3C[phi_s3].x, spE0[phi_s3].x, 1.0f, 1000.0f);
                Math_SmoothScaleMaxF(&this->unk_C3C[phi_s3].y, spE0[phi_s3].y, 1.0f, 1000.0f);
                Math_SmoothScaleMaxF(&this->unk_C6C[phi_s3].x, spBC[phi_s3].x, 1.0f, 1000.0f);
                Math_SmoothScaleMaxF(&this->unk_C6C[phi_s3].y, spBC[phi_s3].y, 1.0f, 1000.0f);
            }
        } else { //Loops are wrong. Use pointer iterators.
            for (phi_s0_2 = 0; phi_s0_2 < 3; phi_s0_2++) {
                Math_SmoothDownscaleMaxF(&this->unk_C3C[phi_s0_2].y, 0.1f, 100.0f);
                Math_SmoothDownscaleMaxF(&this->unk_C6C[phi_s0_2].y, 0.1f, 100.0f);
                phi_f20 = (phi_s0_2 == 0) ? -3000.0f : 0.0f;
                Math_SmoothScaleMaxF(&this->unk_C3C[phi_s0_2].x, phi_f20, 0.1f, 100.0f);
                Math_SmoothScaleMaxF(&this->unk_C6C[phi_s0_2].x, -phi_f20, 0.1f, 100.0f);
            }
        }
    }
}
